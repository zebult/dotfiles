# c +
snippet if
    if(${1})
    {
        ${2}
    }

snippet fori
    for (int i = 0; i < ArraySize(${0:vector}); i++)
    {
    }

snippet forci
    for (int i = 0; i < ${0:vector}.size(); i++)
    {
    }

snippet void
    void ${2}::${1}()
    {
    }

snippet interval
    #include "CCRxScheduler.h"
    CCRx::interval(this, ${1})
    .first()
    .subscribe([=](int v) {
        ${2}
    });

snippet log
    CCLOG("${1}");

snippet cclog
    CCLOG("${1}: %${2}", ${3});

snippet foreach
    for (auto ${1}: ${2}) {
        ${3}
    }

snippet ac
    [ = ] () {
    }${0}

snippet debug
    #ifdef DEBUG
        ${0}
    #endif

snippet cc_synthesize
    CC_SYNTHESIZE(${1:class}, _${2:name}, ${3}<|2|>);

snippet assert
    CCASSERT(${1:false}, "${2:content}");

snippet read
    CC_SYNTHESIZE_READONLY(${1:class}, _${2:name}, ${3}<|2|>);

snippet perform
    Director::getInstance()->getScheduler()->performFunctionInCocosThread([=]() {
    });

snippet retain
    CC_SAFE_RETAIN(${1:obj});

snippet release
    CC_SAFE_RELEASE_NULL(${1:obj});

snippet delay
    runAction(Sequence::create(DelayTime::create(0.01f), CallFunc::create([=]() {
    }), runAction));

snippet ggetparam
    GMI->getParam("${1}");
snippet ggetword
    GMI->getWord("${1}");
snippet rand
    GRUtils::MathUtil::getRandom_0_1()

snippet struct_to_struct
    *((struct ${1} *) &${2});
snippet int_to_str
    std::to_string(${1:int});
snippet str_to_int
    std::atoi(${1:char});

snippet contain
    if (${0:str}.find("b") != std::string::npos)
    {
        CCLOG("文字列`b`が見つかりました");
    }

# Cocos2d-x

snippet tmplayer
    auto tmpLayer = Layout::create();
    tmpLayer->setBackGroundColor(Color3B::GREEN);
    tmpLayer->setBackGroundColorType(Layout::BackGroundColorType::SOLID);
    tmpLayer->setContentSize(Size(Vec2(100, 100)));
    tmpLayer->setPosition(Vec2::ZERO);
    this->addChild(tmpLayer);

    tmpLayer->setTouchEnabled(true);
    tmpLayer->addTouchEventListener([=](Ref* ref, Widget::TouchEventType eventType) {
        if (eventType == Widget::TouchEventType::ENDED) {
            CCLOG("aaa");
        }
    });

snippet create
    auto ${1:value} = ${2:class}::create();

snippet create_scene
    Scene* ${1:class name}::create() {
        auto scene = Scene::create();
        auto layer = <|1|>::create();
        scene->addChild(layer);
        return scene;
    }
    static cocos2d::Scene* create();

snippet getChildren
    for (auto child : _csb->getChildren())
    {
        LOG("!!! child name: %s", child->getName().c_str());
    }

snippet sprite_setTexture
    auto afterSize = ${1:sprite}->getContentSize();
    <|1|>->setTexture(${2:file});
    auto beforeSize = <|1|>->getContentSize();
    <|1|>->setScale(afterSize.width / beforeSize.width, afterSize.height / beforeSize.height);

snippet deprecated_attribute
    CC_DEPRECATED_ATTRIBUTE

snippet ios
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    #endif

snippet android
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
    #endif

# snippet sceneh
# #ifndef ${1:class name}Controller_hpp'
# #define <|1|>Controller_hpp
#
# #include "SceneRoid.h"
#
# class <|1|>View;
# class <|1|>Logic;
#
# class <|1|>Controller : public SceneRoid {
# public:
#     CREATE_FUNC(<|1|>Controller);
#     virtual ~<|1|>Controller();
# protected:
#     <|1|>Controller();
#     virtual bool init() override;
#     virtual void initUI() override;
#
#     <|1|>View* _ui;
#     <|1|>Logic* _logic;
# private:
#     virtual void onMoveScene(const long dest) override;
# };
#
# #endif /* <|1|>Controller_hpp */

# mq4

snippet itos
    IntegerToString(${1})

snippet icustom
    iCustom(Symbol(), Period(), "HBB", 0, 1);

snippet ind
    Comment("0,1:"+iCustom(Symbol(),Period(),"HBB",0,1)+"\n"+
            "1,1:"+iCustom(Symbol(),Period(),"HBB",1,1)+"\n"+
            "2,1:"+iCustom(Symbol(),Period(),"HBB",2,1)+"\n"+
            "3,1:"+iCustom(Symbol(),Period(),"HBB",3,1)+"\n"+
            "4,1:"+iCustom(Symbol(),Period(),"HBB",4,1)+"\n"+
            "5,1:"+iCustom(Symbol(),Period(),"HBB",5,1)+"\n"+
            "6,1:"+iCustom(Symbol(),Period(),"HBB",6,1)+"\n");

snippet buffer
    double MABuffer[];
    SetIndexBuffer(0, MABuffer);
    ArrayResize(MABuffer, Bars);
    MABuffer[i] = iMA(Symbol(), PERIOD_CURRENT, 3, 3, MODE_SMA, PRICE_CLOSE, i);

snippet objectfind
    if(ObjectFind("SellArrow" + Time[1]) >= 0)
    {
        Print("ある");
    }

snippet log
    Common::ViewLog(${1});
