# Color: ---------------------------

# use some colorscheme
[[plugins]]
repo = 'flazz/vim-colorschemes'

[[plugins]]
repo = 'arcticicestudio/nord-vim'

[[plugins]]
repo = 'dzeban/vim-log-syntax'

# Shougo ---------------------------

# http://qiita.com/delphinus/items/cd221a450fd23506e81a
[[plugins]]
repo = 'Shougo/dein.vim'

# vimrcで設定読まないと初期選択状態にならない
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "has('nvim')"

# [[plugins]]
# repo = 'ms-jpq/chadtree'
# if = "has('nvim')"
# hook_add = '''
#     " "let g:chadtree_settings = {
#     " "\    "theme.icon_glyph_set": "ascii",
#     " "\ }
#     let g:chadtree_settings={"keymap":{
#                                 \"select":["S"],
#                                 \"clear_selection": ["1"],
#                                 \"v_split": ["v"],
#                                 \"h_split": ["V"],
#                                 \"open_sys": ["o"],
#                                 \"new": ["i"],
#                                 \"filter": ["f"],
#                                 \"secondary": ["l"],
#                                 \"collapse": ["za"],
#                             \},
#                             \"view":{
#                                 \"sort_by":["file_name"],
#                             \}}
#    "" let g:chadtree_settings = {"theme":{
#    "" \"icon_glyph_set":"ascii,
#    "" \}}
# "",{"theme.icon_glyph_set": ["ascii"],}
# '''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
if = "has('nvim')"
hook_add = '''
    set encoding=UTF-8
'''

# [[plugins]]
# repo = 'adelarsq/vim-emoji-icon-theme'
# if = "has('nvim')"

# [[plugins]]
# repo = 'Shougo/neocomplete.vim'
# if = "has('lua')"
# hook_add = 'source ~/.vim/rc/plugins/neocomplete.rc.vim'

# need neosnippet
# no lazy
[[plugins]]
depends = ['neosnippet']
repo   = 'Shougo/neosnippet-snippets'

# no lazy
[[plugins]]
repo = 'Shougo/unite-outline'

# macvim slowly?
# [[plugins]]
# repo = 'Shougo/neomru.vim'
# if = "!has('gui_running')"

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

# 重くなるかも?
# [[plugins]]
# repo = 'wesleyche/SrcExpl'
# hook_add = 'source ~/.vim/rc/plugins/srcexpl.rc.vim'

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

# Base Tools: ---------------------------

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# [[plugins]]
# repo = 'thinca/vim-splash'
# hook_add = '''
#     let g:splash#path = $HOME . '/.vim/rc/splash.txt'
# '''

# no lazy
# dependency vim-watchdogs
[[plugins]]
repo = 'osyo-manga/shabadou.vim'

# no lazy
[[plugins]]
repo = 'kana/vim-operator-user'

# no lazy
# vim-textobj-indent need
# map <Leader>I <plug>(textobj-indent-i)
[[plugins]]
repo = 'kana/vim-textobj-user'

# f
[[plugins]]
repo = 'randomize/vim-textobj-function'

# Need API
[[plugins]]
repo = 'mattn/webapi-vim'

# Library
[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1
nmap <Leader>o <Plug>(openbrowser-smart-search)
vmap <Leader>o <Plug>(openbrowser-smart-search)
'''

# [[plugins]]
# repo = 'abudden/taghighlight-automirror'
# hook_add = 'source ~/.vim/rc/plugins/taghighlight.rc.vim'

# Convenience Tools: ---------------------------

[[plugins]]
repo = 'gregsexton/gitv'
depends = ['vim-fugitive']
hook_add = '''
let g:Gitv_OpenPreviewOnLaunch = 0
'''

[[plugins]]
repo = 'zebult/vim-bufferlist'
hook_add = '''
nnoremap <silent> 22 :call BufferList()<CR>
nnoremap <silent> 33 :call BufferList()<CR>:TagbarToggle<CR>
'''
# hook_post_source = '''
# call BufferList()
# '''

[[plugins]]
repo = 'TKNGUE/sum-it.vim'

# pyenvのパスがおかしいのかpip installの認識されない為使わない
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# build = './install.sh nightly'
# hook_add = 'source ~/.vim/rc/plugins/coc.rc.vim'

# [[plugins]]
# repo = 'coc-extensions/coc-omnisharp'

# [[plugins]]
# repo = 'OmniSharp/omnisharp-roslyn'

[[plugins]]
repo = 'Shougo/deol.nvim'
# hook_add = 'source ~/.vim/rc/plugins/deol.rc.vim'

[[plugins]]
if = "!has('gui_running')"
repo = 'zxqfl/tabnine-vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_map = '<c-\>'
'''

# [[plugins]]
# repo = 'rhysd/accelerated-jk'
# hook_source = '''
#     nmap j <Plug>(accelerated_jk_gj)
#     nmap k <Plug>(accelerated_jk_gk)
# '''

[[plugins]]
repo = 'mattn/benchvimrc-vim'

[[plugins]]
repo = 'jceb/vim-orgmode'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = 'source ~/.vim/rc/plugins/denite.rc.vim'

[[plugins]]
repo = 'zebult/denite-git'

[[plugins]]
repo = 'mattesgroeger/vim-bookmarks'
hook_add = 'source ~/.vim/rc/plugins/bookmarks.rc.vim'

# [[plugins]]
# repo = 'rhysd/clever-f.vim'
# on_event = 'BufRead'

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = 'source ~/.vim/rc/plugins/CamelCaseMotion.rc.vim'

# [[plugins]]
# repo = 'zebult/scrolloff_toggle.vim'

# [[plugins]]
# repo = 'Siprah/vim-todoist'

# [[plugins]]
# repo = 'kien/rainbow_parentheses.vim'
# hook_add = 'source ~/.vim/rc/plugins/rainbow_parentheses.rc.vim'

# [[plugins]]
# repo = 'thinca/vim-fontzoom'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/plugins/lightline.rc.vim'

# no lazy
[[plugins]]
repo = 'mattn/googlesuggest-complete-vim'

[[plugins]]
repo = 'kana/vim-metarw'

[[plugins]]
repo = 'zebult/vim-metarw-redmine'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/vim-metarw-redmine.rc.vim'

[[plugins]]
repo = 'zebult/vim-metarw-trello'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/vim-metarw-trello.rc.vim'

# [[plugins]]
# repo = 'basyura/unite-yarm'
# hook_add = '''
#   let g:unite_yarm_server_url = ''
#   let g:unite_yarm_access_key = ''
#   let g:unite_yarm_limit = 100
#   let g:unite_yarm_backup_dir = '/tmp/yarm'
# '''

# ok~
# [[plugins]]
# repo = 'toritori0318/vim-redmine'
# hook_add = '''
#     let g:redmine_auth_site = ''
#     let g:redmine_auth_user = ''
#     let g:redmine_auth_pass = ''
#     let g:redmine_auth_key  = ''
# '''

[[plugins]]
repo = 'emonkak/vim-metarw-gist'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/vim-metarw-gist.rc.vim'

[[plugins]]
repo = 'joker1007/vim-metarw-qiita'
hook_add = '''
let g:qiita_user='zebult'
let g:qiita_token='xxxxxx'
'''

[[plugins]]
repo = 'mattn/vim-metarw-gdrive'
hook_add = 'source ~/.vim/rc/plugins/gdrive.rc.vim'

[[plugins]]
repo = 'mattn/vim-metarw-simplenote'
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/simplenote.rc.vim'

[[plugins]]
repo = 'simplenote-vim/simplenote.vim'

[[plugins]]
repo = 'mattn/vimplenote-vim'

# [[plugins]]
# repo = 'simeji/vim-chatworker.git'
# rev  = 'get-messages'
# hook_add = '''
#     " let g:chatwork_token = ''
#     " nnoremap <Leader>c :Unite chatworker<CR>x
#     " nnoremap <Leader>p :Unite chatwork_post_message<CR>x
# '''

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = 'source ~/.vim/rc/plugins/smartchr.rc.vim'

# <C-x><C-u>
# [[plugins]]
# repo = 'junegunn/vim-emoji'
# hook_add = 'set completefunc=emoji#complete'

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
    nmap <Space>m <Plug>(quickhl-manual-this)
    xmap <Space>m <Plug>(quickhl-manual-this)
    nmap <Space>M <Plug>(quickhl-manual-reset)
    xmap <Space>M <Plug>(quickhl-manual-reset)
'''

# >> can
[[plugins]]
repo = 'kana/vim-submode'
hook_add = 'source ~/.vim/rc/plugins/submode.rc.vim'

[[plugins]]
repo = 'jacquesbh/vim-showmarks'
hook_add = 'source ~/.vim/rc/plugins/showmarks.rc.vim'

# i: ex(cii)
[[plugins]]
repo = 'kana/vim-textobj-indent'

# DEFAULT KEY MAPPINGS, ,w ex(ci,w)
# [[plugins]]
# repo = 'h1mesuke/textobj-wiw'

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
    let g:operator_camelize_all_uppercase_action = "lowercase"
    let g:operator_decamelize_all_uppercase_action = "lowercase"
    map C <plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
    map R <Plug>(operator-replace)
    nmap gp Riw
'''

# gitコマンド
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = 'source ~/.vim/rc/plugins/switch.rc.vim'

# # GBrowse
# [[plugins]]
# repo = 'tpope/vim-rhubarb'
# hook_add = '''
#     let g:github_enterprise_urls = ['https://github.com/zebult']
# '''

[[plugins]]
repo = 'ruanyl/vim-gh-line'

# gitマーク, ハイライト
[[plugins]]
repo = 'airblade/vim-gitgutter'
if = "!has('gui_running')"
hook_add = 'source ~/.vim/rc/plugins/gitgutter.rc.vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=239
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=238
    let g:indent_guides_color_change_percent = 30
    let g:indent_guides_guide_size = 1
    let g:indent_guides_start_level = 1
'''

[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
    ca ag Ag
    nnoremap 88 :<C-u>tab sp<CR>:Ag ''<CR>
    vnoremap 88 y:<C-u>tab sp<CR>:Ag '0'<CR>
    nnoremap g* :Ag ''<CR>
    nnoremap gr :Ag ''<CR>
    vnoremap gr y:Ag '0'<CR>
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
    let g:rooter_manual_only = 1
    let g:rooter_patterns = ['.git', '.git/', 'tags', '_darcs/', '.hg/', '.bzr/', 'Makefile', 'GNUMakefile', 'GNUmakefile', '.svn/']
'''

# Swift ---------------------------

# syntax and indent and more
[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'

# syntax and indent
[[plugins]]
repo = 'toyamarinyon/vim-swift'
on_ft = 'swift'

# # syntax
# [[plugins]]
# repo = 'kballard/vim-swift'
# on_ft = 'swift'

# 辞書補完
# [[plugins]]
# repo = 'tokorom/swift-dict.vim'
# on_ft = 'swift'

# C++ ---------------------------

# [[plugins]]
# repo = 'lyuts/vim-rtags'
# hook_add = 'source ~/.vim/rc/plugins/rtags.rc.vim'

# [[plugins]]
# repo = 'jsierant/deoplete-rtags'
# depends = ['deoplete.nvim']
# on_ft = ['c', 'cpp', 'cmake', 'mm', 'm']

# syntax
[[plugins]]
repo = 'vim-jp/cpp-vim'

# color
[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'

# [[plugins]]
# repo = 'tweekmonster/deoplete-clang2'
# depends = ['deoplete.nvim']
# on_ft = ['c', 'cpp', 'cmake', 'mm', 'm']

# ouch objc
# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp', 'cmake']
# if = "has('nvim')"
# depends = ['deoplete.nvim']

# .vim/syntaxに記述
# [[plugins]]
# repo = 'osyo-manga/vim-cpp-syntax-reserved_identifiers'
# hook_add = '''
#     highlight link cReservedIdentifiers ErrorMsg
# '''
# on_ft = 'cpp'

# cocos2d-x syntax color
# [[plugins]]
# repo = 'Rubonnek/vim-cc2dx'

# clang complete(need vimproc)
# [[plugins]]
# repo = 'osyo-manga/vim-marching'
# filetypes  =  ['c', 'cpp', 'm', 'mm']
# hook_add = '''
#     " clang コマンドの設定
#     let g:marching_clang_command = "/usr/bin/clang"
#     " インクルードディレクトリのパスを設定
#     let g:marching_include_paths = [
#     \   $COCOS_ROOT,
#     \   "/usr/local/Cellar/boost"
#     \]" neocomplete.vim と併用して使用する場合は以下の設定を行う
#     let g:marching_enable_neocomplete = 1
#     let g:marching_enable_deoplete = 1
# '''

# Vim ---------------------------

# complete
[[plugins]]
repo = 'Shougo/neco-vim'

# JavaScript ---------------------------

# color
[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'javascript'
on_event = ['BufRead']

# Shell ---------------------------

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = 'sh'

# Java ---------------------------

# [[plugins]]
# repo = 'ervandew/eclim'
# filetypes  =  ['java']

# Android ---------------------------
[[plugins]]
repo = 'thinca/vim-logcat'

# [[plugins]]
# repo = 'naseer/logcat'
# [[plugins]]
# repo = 'vim-scripts/Logcat-syntax-highlighter'

# C# ---------------------------

# [[plugins]]
# repo = 'LucHermitte/VimFold4C'

# syntax
[[plugins]]
repo = 'OrangeT/vim-csharp'
on_ft = ['cs', 'csi', 'csx']

# # cs complement
# # 自動でserverセットアップしてくれる(mono起動する)(してくれない場合手動: plugin下のserverへ行き, xbuild)
# # path/OmniSharp/omnisharp-vim/server$ xbuild # xbuildはmonoに同包されているコマンド
# # xbuildで379 Error(s)等で失敗する場合は、vimの再読込すると直った(monoの再インストールは意味なかった)
# # [deoplete]大量エラー発生時: monoの準備終わってない(Solution has finished loadingが呼ばれたらok)
# [[plugins]]
# repo = 'OmniSharp/omnisharp-vim'
# on_ft =  ['cs', 'csi', 'csx']
# windows = 'msbuild server/OmniSharp.sln'
# mac     = 'xbuild server/OmniSharp.sln'
# unix    = 'xbuild server/OmniSharp.sln'
# hook_add = 'source ~/.vim/rc/plugins/omnisharp.rc.vim'

# [[plugins]]
# repo = 'dimixar/deoplete-omnisharp'
# depends = ['deoplete.nvim']
# on_ft = ['cs', 'csi', 'csx']

# Kotlin ---------------------------

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'

# HTML ---------------------------

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
hook_add = 'source ~/.vim/rc/plugins/emmet.rc.vim'

[[plugins]]
repo = 'tell-k/vim-browsereload-mac'
on_ft = 'html'
hook_add = '''
    let g:returnApp = "Alacritty"
'''

# Markdown ---------------------------

# syntax hilight
# [[plugins]]
# repo = 'gabrielelana/vim-markdown'
# filetypes  =  ['md', 'mkd', 'markdown']
# hook_add = '''
#     " let g:markdown_enable_folding = 0
#     let g:markdown_enable_spell_checking = 0
# '''

# foldmethod jis quickly
[[plugins]]
repo = 'nelstrom/vim-markdown-folding'
filetypes  =  ['md', 'mkd', 'markdown']

# [[plugins]]
# repo = 'rcmdnk/vim-markdown'
# filetypes  =  ['md', 'mkd', 'markdown']

# slow
# [[plugins]]
# repo = 'plasticboy/vim-markdown'
# filetypes  =  ['md', 'mkd', 'markdown']

# Toml ---------------------------

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Tex ---------------------------

# Vim上でtexの部分コンパイルをする
# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = 'tex'

# Solidity ---------------------------
[[plugins]]
repo = 'tomlion/vim-solidity'
on_ft = 'tex'
