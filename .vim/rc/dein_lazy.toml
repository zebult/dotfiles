# Shougo: --------------------------- vimfier need
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_post_source = 'source ~/.vim/rc/plugins/unite.rc.vim'

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# hook_add = 'source ~/.vim/rc/plugins/vimfiler.rc.vim'
# on_map = '<Leader>f'

[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
on_map = '<Leader>f'
hook_add = 'source ~/.vim/rc/plugins/defx.rc.vim'

# [[plugins]]
# repo = 'roxma/nvim-yarp'
# if = "!has('nvim')"
# on_map = '<Leader>f'

# [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
# if = "!has('nvim')"
# on_map = '<Leader>f'

# [[plugins]]
# repo = 'cocopon/vaffle.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = '<Leader>v'
hook_add = '''
let g:vimshell_split_command =
      \ get(g:, 'vimshell_split_command', '')
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
if = "has('nvim')"
on_i = 1

[[plugins]]
if = "!has('gui_running')"
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
" <C-k>でsnippetの展開
let g:neosnippet#snippets_directory='~/.vim/snippets/,~/Dropbox/Saichi/Vim/Private/snippets'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

# include周りの補完, c, c++は必須
# [[plugins]]
# repo = 'Shougo/neoinclude.vim'
# on_i = 1
# on_ft = ['c', 'cpp', 'm', 'mm']
# hook_add = '''
# let g:neoinclude#_paths = '/Applications/Cocos/Cocos2d-x/cocos2d-x-3.6/cocos'
# let g:neoinclude#_paths = '/usr/local/Cellar/boost'
# '''

# Base Tools: ---------------------------
# 非同期コンパイル(OmniSharpを自動で起動もしてくれる)
# on_event = 'BufRead'
[[plugins]]
repo = 'tpope/vim-dispatch'
on_i = 1

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = 'source ~/.vim/rc/plugins/quickrun.rc.vim'

# syntax check with quickrun and save
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_event = ['BufWrite']
hook_post_source = '''
call watchdogs#setup(g:quickrun_config)
'''
hook_add = 'source ~/.vim/rc/plugins/watchdogs.rc.vim'

# syntax error color (jceb fork, gradeup column)
[[plugins]]
repo = 'cohama/vim-hier'
on_source = 'vim-watchdogs'

# show watchdogs error on command window
[[plugins]]
repo = 'dannyob/quickfixstatus'
on_source = 'vim-watchdogs'

# Add mark and jump error
[[plugins]]
repo = 'KazuakiM/vim-qfsigns'
on_source = 'vim-watchdogs'
hook_add = '''
" let g:qfsigns#AutoJump = 1
let g:qfsigns#Config = {'id': '5051', 'name': 'QFRare',}
sign define QFRare texthl=SpellBad text=>>
'''

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
on_source = 'vim-watchdogs'

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_ft = ['cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/gtags.rc.vim'

# 英単語辞書補完(重いのでoff)
# [[plugins]]
# repo = 'ujihisa/neco-look'
# on_i = 1
# on_ft  =  ['*']

# make plugin(create plugin) (:LayoutPlugin xxx.vim)
[[plugins]]
on_cmd = 'LayoutPlugin'
repo = 'mopp/layoutplugin.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/anzu.rc.vim'

# Convenience Tools: ---------------------------
# [[plugins]]
# repo = 'zebult/lgtm-vim'
# on_event = 'BufWrite'
# hook_add = '''
# nnoremap gl :LGTMRandomList<CR>:PrevimOpen<CR>
# '''

[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = '<C-a>'

[[plugins]]
repo = 'zebult/lgtm-rl-vim'
on_event = 'BufWrite'
hook_add = '''
let g:lgtm_random_list_count = 10
nnoremap gL :LGTMRL<CR>:PrevimOpen<CR>
'''

[[plugins]]
repo = 'vim-scripts/diffchar.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'tyamoto/ZoomWin'
on_event = 'BufRead'
hook_source = '''
nnoremap s; :ZoomWin<CR>
'''

[[plugins]]
repo = 'agatan/vim-vlack'
# on_event = 'BufRead'
on_i = 1
hook_add = 'source ~/Dropbox/Saichi/Vim/Private/slack.rc.vim'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_event = 'BufRead'
if = "!has('gui_running')"
hook_source = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_event = 'BufWrite'
hook_post_source = 'source ~/.vim/rc/plugins/gina.rc.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'
on_event = 'BufRead'
hook_add  = '''
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>/<C-r><C-w>/g<Left><Left>
nnoremap sup y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
vnoremap sub "1y:OverCommandLine<CR>%s/<C-r>1/<C-r>1/g<Left><Left>
" vnoremap sub :OverCommandLine<CR>s///g<Left><Left><Left>
vnoremap sup :OverCommandLine<CR>s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''

[[plugins]]
repo = 'malithsen/trello-vim'
on_i = 1

[[plugins]]
repo = 'cofyc/vim-uncrustify'
on_event = 'BufRead'

[[plugins]]
repo = 'prettier/vim-prettier'
on_event = 'BufRead'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_event = 'BufRead'
hook_post_source = '''
call tcomment#DefineType('objc', '// %s')
'''
hook_add = '''
" ダッシュボード表示されたらmacのショートカット見直し
let g:tcomment_mapleader1 = '<F12>'
" let g:tcommentMapLeader1 = '<C-b>'
let g:tcomment_opleader1 = 'gc'
let g:tcomment_opleader2 = 'gC'
'''

# Need to `brew install global`
[[plugins]]
repo = 'zebult/auto-gtags.vim'
hook_add = 'source ~/.vim/rc/plugins/auto-gtags.rc.vim'

# Need to `brew install ctags`
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = 'source ~/.vim/rc/plugins/auto-ctags.rc.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'BufRead'
hook_add = 'source ~/.vim/rc/plugins/easymotion.rc.vim'

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_event = 'BufRead'
hook_add = '''
map J <Plug>(edgemotion-j)
map K <Plug>(edgemotion-k)
'''

# メタ文字含むとlightline壊れるので注意
# [[plugins]]
# repo = 'zebult/toggl.vim'
# hook_add = 'source ~/Dropbox/Saichi/Vim/Private/toggl.rc.vim'
# on_event = 'BufRead'

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'

# macvim日本語打てなくなる
[[plugins]]
repo = 'cohama/lexima.vim'
if = "!has('gui_running')"
hook_post_source = 'source ~/.vim/rc/plugins/lexima.rc.vim'
on_i = 1

on_map = '<Plug>(eskk:toggle)'
[[plugins]]
repo = 'tyru/eskk.vim'
on_i = 1
hook_post_source = '''
imap <C-j> <Plug>(eskk:toggle)
cmap <C-j> <Plug>(eskk:toggle)

if dein#is_sourced('eskk')
  augroup vimrc-plugin-eskk
    autocmd!
    autocmd CursorHold * silent EskkUpdateDictionary
    autocmd User eskk-initialize-pre call s:init_eskk()
  augroup END
endif

function! s:init_eskk()
  let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
  call table.add_map(',', '，')
  call table.add_map('.', '．')
  call table.add_map('=', '＝')
  call table.add_map('~', '～')
  call t.add_map('va', 'ゔぁ')
  call t.add_map('vi', 'ゔぃ')
  call t.add_map('vu', 'ゔ')
  call t.add_map('ve', 'ゔぇ')
  call t.add_map('vo', 'ゔぉ')
  call t.add_map('z ', '　')
  call t.add_map('h-', '-')
  call t.add_map('h!', '!')
  call t.add_map('h/', '/')
  call t.add_map('h ', ' ')
  call t.add_map('h:', ':')
  call t.add_map('h;', ';')
  call t.add_map('h[', '[')
  call t.add_map('h]', ']')
  call t.add_map('h(', '(')
  call t.add_map('h)', ')')
  call eskk#register_mode_table('hira', t)
  unlet t
endfunction
'''
hook_add = 'source ~/.vim/rc/plugins/eskk.rc.vim'

# [[plugins]]
# repo = 'thinca/vim-ref'
# hook_add = 'source ~/.vim/rc/plugins/ref.rc.vim'

# <Return> input
# f hint
# <Tab> move link
[[plugins]]
repo = 'yuratomo/w3m.vim'
hook_add = '''
let g:w3m#external_browser = 'google-chrome'
nnoremap <Leader>g :W3m google 
'''
on_map = '<Leader>g'

# TODO: can not use python3
[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = 'nnoremap zu :<C-u>GundoToggle<CR>'

# Need 'brew install cmigemo' (gvim限定)
[[plugins]]
repo = 'haya14busa/vim-migemo'
on_map = 'g'
hook_add  = '''
nnoremap g/ :Migemo<CR>
'''

[[plugins]]
repo = 'kana/vim-altr'
hook_add = 'nmap <Leader>a <Plug>(altr-forward)'
hook_post_source = 'source ~/.vim/rc/plugins/altr.rc.vim'
on_map = '<Plug>(altr-'
# on_event = ['BufWrite']
# on_event = 'BufWrite'
# on_i = 1
# on_event = 'BufWrite'

[[plugins]]
repo = 'zebult/a.vim.git'
hook_add = '''
nnoremap S; :AV<CR>
'''
on_event = 'BufRead'

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = 'source ~/.vim/rc/plugins/calendar.rc.vim'
on_cmd = ['Calendar']

# [[plugins]]
# repo = 'mattn/calendar-vim'
# on_cmd = ['Calendar']
# hook_add = '''
# let g:calendar_google_calendar = 1
# '''


# file shaping(:Align =)
[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
let g:loaded_AlignMapsPlugin = 0
let g:Align_xstrlen = 3
vnoremap al :Align \|<CR>
'''
on_i = 1

# TODO 一覧
# [[plugins]]
# repo = 'vim-scripts/TaskList.vim'
# hook_add = '''
# nnoremap <Leader>T :TaskList<CR>
# '''
# on_map = '<Leader>T'

# Need to `brew install ctags`
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'source ~/.vim/rc/plugins/tagbar.rc.vim'

[[plugins]]
repo = 'rizzatti/dash.vim'
hook_add = 'source ~/.vim/rc/plugins/dash.rc.vim'
on_map = '<Plug>(Dash'

# C++ ---------------------------

# c, cpp complement
# [[plugins]]
# repo = 'justmao945/vim-clang'
# on_event = 'BufRead'
# on_ft  =  ['c', 'cpp', 'h', 'hpp']
# hook_add = 'source ~/.vim/rc/plugins/clang.rc.vim'

# C# ---------------------------

# lightlineにエラー表示 http://itchyny.hatenablog.com/entry/20130918/1379461406
# TODO: neomakeが速いらしい
[[plugins]]
repo = 'scrooloose/syntastic'
on_event = ['BufWrite']
on_ft  =  ['cs', 'js', 'py']
hook_add = '''
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
'''

[[plugins]]
repo = 'w0rp/ale'
on_event = ['BufWrite']
# on_ft  =  ['cs', 'js', 'py']
on_ft  =  ['cs', 'js']
hook_add = 'source ~/.vim/rc/plugins/ale.rc.vim'

# cs complement
# 自動でserverセットアップしてくれる(mono起動する)(してくれない場合手動: plugin下のserverへ行き, msbuild)
# path/OmniSharp/omnisharp-vim/server$ xbuild # msbuildはmonoに同包されているコマンド
# xbuildで379 Error(s)等で失敗する場合は、vimの再読込すると直った(monoの再インストールは意味なかった)
# [deoplete]大量エラー発生時: monoの準備終わってない(Solution has finished loadingが呼ばれたらok)
# repo = 'OmniSharp/omnisharp-vim'

# [[plugins]]
# repo = 'yucchiy/omnisharp-vim'
# on_ft =  ['cs', 'csi', 'csx']
# hook_add = 'source ~/.vim/rc/plugins/omnisharp.rc.vim'
# depends = ['vim-dispatch']
# windows = 'msbuild server/OmniSharp.sln'
# mac     = 'xbuild server/OmniSharp.sln'
# unix    = 'xbuild server/OmniSharp.sln'

[[plugins]]
repo = 'zebult/univim'
on_event = ['BufWrite']
hook_add = '''
autocmd FileType *.cs nnoremap rr :<C-u>UnivimPlay<CR>
autocmd FileType *.cs nnoremap ff :<C-u>UnivimBuild<CR>
nnoremap <Leader>ua :<C-u>UnivimMenu Build\ Project\ AllScene\ Android<CR>
nnoremap <Leader>ui :<C-u>UnivimMenu Build\ Project\ AllScene\ iOS<CR>
"nnoremap <Leader>u/ :<C-u>UnivimFind<CR>
"nnoremap <Leader>ub :<C-u>UnivimMenu Build\ Setting<CR>
"nnoremap <Leader>us :<C-u>UnivimMenu SymbolEditorWindow<CR>
"nnoremap <Leader>uu :<C-u>UnivimMenu Scenario Data Builder<CR>
'''

# Markdown ---------------------------

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'md'

# preview
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'md'
hook_add = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
"let g:previm_open_cmd = 'open -a Safari'
autocmd FileType markdown nnoremap <Leader>R :PrevimOpen<CR>
'''

# Nodejs ---------------------------

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'js'

[[plugins]]
repo = 'moll/vim-node'
on_ft = 'js'

# Swift ---------------------------

[[plugins]]
repo = 'zebult/vim-zxcode'
on_ft = ['m', 'mm', 'swift', 'cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/zxcode.rc.vim'

[[plugins]]
repo = 'tokorom/xcode-actions.vim'
on_ft = ['m', 'mm', 'swift', 'cpp', 'h', 'hpp']
hook_add = 'source ~/.vim/rc/plugins/xcode-actions.rc.vim'

# Xcode化
# [[plugins]]
# repo = 'msanders/cocoa.vim'
# on_ft = ['mm', 'm', 'swift', 'cpp', 'h', 'hpp']

# iOSシミュレータ使える??
# [[plugins]]
# repo = 'kballard/vim-swift'
# on_i = 1
# on_ft = ['m', 'swift', 'cpp', 'h', 'hpp']

# brew install sourcekitten
# [[plugins]]
# repo = 'mitsuse/autocomplete-swift'
# on_i = 1
# on_ft = 'swift'
# hook_add = 'autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)' not use snip

# Go ---------------------------

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
on_event = ['BufWrite']

# Python ---------------------------
# [[plugins]]
# repo = 'tell-k/vim-autopep8'
# on_ft = 'python'
# hook_add = '''
#     let g:autopep8_on_save = 1
#     let g:autopep8_disable_show_diff=0
#     let g:autopep8_aggressive=1
# '''
# on_event = ['BufWrite']

# https://qiita.com/hnishi/items/6cf051f709beccf43db4
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = 'python'
on_event = ['BufWrite']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_ft = 'python'
hook_add = '''
    let g:lsp_diagnostics_echo_cursor = 1
'''
on_event = ['BufWrite']

# Html ---------------------------

# JavaScript ---------------------------

[[plugins]]
repo = 'hushicai/tagbar-javascript.vim'
on_ft = 'javascript'
on_event = ['BufWrite']

[[plugins]]
repo = 'geoffharcourt/vim-matchit'
on_ft = 'javascript'
on_event = ['BufRead']

# Org ---------------------------

# Game ---------------------------
# [[plugins]]
# repo = 'rbtnn/game_engine.vim'
#
# [[plugins]]
# repo = 'rbtnn/puyo.vim'
#
# [[plugins]]
# repo = 'rbtnn/mario.vim'
#
# [[plugins]]
# repo = 'rbtnn/reversi.vim'
